---
title: "Balance de los cambios"
subtitle: "Referente al programa XXX o la tarea YYY"
author: "Nombre del alumno"
date: "`r format(Sys.time(), '%A %d, %B %Y')`"
output:
html_document:
fig_caption: yes
number_sections: yes
toc: yes
toc_float: yes
theme: journal
df_print: paged
pdf_document:
toc: yes
fig_caption: yes
df_print: kable
---
install.packages("WGCNA")
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
)
#install.packages("~/Downloads/WGCNA_1.67.tar", repos = NULL, lib=.Library)
install.packages("C:\Users\carme\Descargas\WGCNA_1.70-3.zip", repos = NULL, lib=.Library, type = "source")
#install.packages("~/Downloads/WGCNA_1.67.tar", repos = NULL, lib=.Library)
install.packages("C:\Users\carme\Downloads\WGCNA_1.70-3.zip", repos = NULL, lib=.Library, type = "source")
library(WGCNA) # Error, probably impute is not installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
```{r}
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.
workingDir = ".";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
#Read in the female liver data set
femData = read.csv("LiverFemale3600.csv");
#Read in the female liver data set
femData = read.csv("LiverFemale3600.csv");
# Take a quick look at what is in the data set:
dim(femData);
# Take a quick look at what is in the data set:
dim(femData);
names(femData);
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.
workingDir = ".";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
#Read in the female liver data set
femData = read.csv("LiverFemale3600.csv");
# Take a quick look at what is in the data set:
dim(femData);
names(femData);
```{r}
datExpr0 = as.data.frame(t(femData[, -c(1:8)]));
names(datExpr0) = femData$substanceBXH;
rownames(datExpr0) = names(femData)[-c(1:8)];
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
if (!gsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
sampleTree = hclust(dist(datExpr0), method = "average");
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Plot a line to show the cut
abline(h = 15, col = "red");
sampleTree = hclust(dist(datExpr0), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Plot a line to show the cut
abline(h = 15, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
traitData = read.csv("ClinicalTraits.csv");
dim(traitData)
names(traitData)
# remove columns that hold information we do not need.
allTraits = traitData[, -c(31, 16)];
allTraits = allTraits[, c(2, 11:36) ];
dim(allTraits)
names(allTraits)
# Form a data frame analogous to expression data that will hold the clinical traits.
femaleSamples = rownames(datExpr);
traitRows = match(femaleSamples, allTraits$Mice);
datTraits = allTraits[traitRows, -1];
rownames(datTraits) = allTraits[traitRows, 1];
collectGarbage();
setwd("C:/Users/carme/Mi unidad/Documentos/Universidad/Ingeniería de la salud UMA/2º AÑO/1º cuatrimestre/Estructura de datos y algortimos/CURSO 2122/Practica6")
# Reading the data
#rawdata = read.table("stats_latinsquare10batch.txt");
rawdata = read.table("stats_ls10.txt");
# Compute basic statistics
m <- dim(rawdata)[1];
n <- dim(rawdata)[2];
even_ind <- seq(2, n, 2)
odd_ind  <- seq(3, n, 2)
stderr <- function(x) sd(x)/sqrt(length(x))
dataframe <- data.frame(
"clues" = rawdata[,1],
"nodes" = apply(t(rawdata)[even_ind,], 2, mean),
"nodeserr" = apply(t(rawdata)[even_ind,], 2, stderr),
"solvable" = apply(t(rawdata)[odd_ind,], 2, mean),
"solvableerr" = apply(t(rawdata)[odd_ind,], 2, stderr)
)
# Find the range of clues that encloses 50% solvavbility
mini <- min(which(dataframe$solvable<.5, arr.ind=TRUE))-1
maxi <- max(which(dataframe$solvable>.5, arr.ind=TRUE))+1
psol1 <- dataframe$clues[mini]
psol2 <- dataframe$clues[maxi]
maxnodesi <- which.max(dataframe$nodes)
pnodes <- dataframe$clues[maxnodesi]
library(ggplot2)
figure_nodes <- ggplot(data=dataframe, aes(x=clues, y=nodes)) +
geom_line(colour = "blue") +
geom_errorbar(aes(ymin=nodes-nodeserr, ymax=nodes+nodeserr), colour="blue", width=.02) +
geom_point(shape=21, size=1, colour="blue",  fill="white") +
xlab ("fraction of pre-assigned elements") +
ylab ("nodes expanded") +
geom_line(data=data.frame(x=c(pnodes, pnodes), y = c(0, +Inf)), aes(x=x, y=y), colour = "black", size = .5, linetype = "dashed") +
geom_text(aes(x = pnodes, y = 0, label = format(pnodes), vjust = "top"), colour = "black") +
theme_bw()
show(figure_nodes)
ggsave("nodes.png", plot = figure_nodes, device = "png")
figure_solvable <- ggplot(data=dataframe, aes(x=clues, y=solvable)) +
geom_line(colour = "blue") +
geom_errorbar(aes(ymin=solvable-solvableerr, ymax=solvable+solvableerr), colour="blue", width=.02) +
geom_point(shape=21, size=1, colour="blue",  fill="white") +
xlab ("fraction of pre-assigned elements") +
ylab ("solvability") +
geom_line(data=data.frame(x=c(-Inf, +Inf), y = c(0.5, .5)), aes(x=x, y=y), colour = "black", size=.5, linetype = "dashed") +
annotate("rect", xmin=psol1, xmax=psol2, ymin=-Inf, ymax=+Inf, fill='black', alpha=0.2) +
geom_text(aes(x = psol1, y = 0, label = format(psol1, digits=2), vjust = "top", hjust ="right"), colour = "black") +
geom_text(aes(x = psol2, y = 1, label = format(psol2, digits=2), vjust = "bottom", hjust = "left"), colour = "black") +
theme_bw()
show(figure_solvable)
ggsave("solvability.png", plot = figure_solvable, device = "png")
